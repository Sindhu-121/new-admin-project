{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\new admin project\\\\client\\\\src\\\\components\\\\Coursecreation.jsx\";\n// import React, { useState, useEffect } from 'react';\n\n// function  Coursecreation() {\n\n//   const [typeOfTests, setTypeOfTests] = useState([]);\n//   const [selectedTypeOfTest, setSelectedTypeOfTest] = useState('');\n//  const [exams, setExams] = useState([]);\n//  const [selectedexams, setSelectedexams] = useState('');\n//  const [selectedSubjects, setSelectedSubjects] = useState([]);\n//  const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [questionTypes, setQuestionTypes] = useState([]);\n//   const [selectedQuestionTypes, setSelectedQuestionTypes] = useState([]);\n\n//  const [formData, setFormData] = useState({\n//   courseName: '',\n//   examId: '',\n//   typeOfTestId: '',\n//   questiontypes:'',\n//   courseStartDate: '',\n//   courseEndDate: '',\n//   cost: '',\n//   discount: '',\n//   discountAmount: '',\n//   totalPrice: '',\n\n// });\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/type-of-tests')\n//       .then(response => response.json())\n//       .then(data => {\n//         setTypeOfTests(data);\n//       })\n//       .catch(error => console.error('Error fetching type of tests:', error));\n//   }, []); \n\n//   const handleTypeOfTestChange = (event) => {\n//     setSelectedTypeOfTest(event.target.value);\n//   };\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/question-types')\n//       .then(response => response.json())\n//       .then(data => {\n//         // console.log('Question Types:', data); // Log the response\n//         setQuestionTypes(data); // Update the state\n//       })\n//       .catch(error => console.error('Error fetching question types:', error));\n//   }, []);\n\n//   const handleQuestionTypeChange = (event, questionTypeId) => {\n//     const isChecked = event.target.checked;\n\n//     if (isChecked) {\n//       // Add the selected question type to the list\n//       setSelectedQuestionTypes([...selectedQuestionTypes, questionTypeId]);\n//     } else {\n//       // Remove the deselected question type from the list\n//       setSelectedQuestionTypes(selectedQuestionTypes.filter(id => id !== questionTypeId));\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/courese-exams')\n//       .then(response => response.json())\n//       .then(data => {\n//         setExams(data);\n//       })\n//       .catch(error => console.error('Error fetching exams:', error));\n//   }, []);\n\n//   const handleexams = async (event) => {\n//     const selectedExamId = event.target.value;\n\n//     // Fetch subjects for the selected exam\n//     try {\n//       const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\n//       const subjectsData = await response.json();\n//       setSelectedSubjects(subjectsData);\n//     } catch (error) {\n//       console.error('Error fetching subjects:', error);\n//     }\n\n//     setSelectedexams(selectedExamId);\n//   };\n\n//   const handleSubjectChange = (event, subjectId) => {\n//     const isChecked = event.target.checked;\n\n//     if (isChecked) {\n//       // Add the selected subject to the list\n//       setSelectedSubjects([...selectedSubjects, subjectId]);\n//     } else {\n//       // Remove the deselected subject from the list\n//       setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n\n//     // Directly parse cost and discount from their input values\n//     if (name === 'cost' || name === 'discount') {\n//       const cost = name === 'cost' ? parseFloat(value) : formData.cost;\n//       const discount = name === 'discount' ? parseFloat(value) : formData.discount;\n\n//       // Calculate discount amount\n//       const discountAmount = (!isNaN(cost) && !isNaN(discount)) ? (cost * discount) / 100 : '';\n\n//       // Calculate total price after discount\n//       const totalPrice = (!isNaN(cost) && !isNaN(discountAmount)) ? cost - discountAmount : '';\n\n//       // Update the form data including formatted dates\n//       setFormData({\n//         ...formData,\n//         typeOfTestId: selectedTypeOfTest,\n//         examId: selectedexams,\n//         subjects: selectedSubjects,\n//         questiontypes: selectedQuestionTypes,\n//         courseStartDate: startDate,\n//         courseEndDate: endDate,\n//         cost: cost,\n//         discount: discount,\n//         discountAmount: discountAmount,\n//         totalPrice: totalPrice,\n\n//       });\n//     } else if (name === 'courseStartDate' || name === 'courseEndDate') {\n//       // For date fields, update as usual\n//       setFormData({ ...formData, [name]: value });\n//     } else {\n//       // For other fields, update as usual\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     // Prepare the data for submission\n//     const data = {\n//       ...formData,\n//       typeOfTestId: selectedTypeOfTest,\n//       examId: selectedexams,\n//       subjects: selectedSubjects,\n//       questiontypes: selectedQuestionTypes,\n//     };\n\n//     // Submit the data to the server\n//     try {\n//       const response = await fetch('http://localhost:3081/course-creation', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(data),\n//       });\n\n//       const result = await response.json();\n//       console.log(result);\n//       // Handle success or show a success message to the user\n//     } catch (error) {\n//       console.error('Error submitting course data:', error);\n//       // Handle error or show an error message to the user\n//     }\n//   };\n\n//   const handleStartDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setStartDate(formattedDate);\n//   };\n\n//   const handleEndDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setEndDate(formattedDate);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Create a New Course</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"courseName\">Course Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"courseName\"\n//             name=\"courseName\"\n//             value={formData.courseName}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//       <label htmlFor=\"typeOfTest\">Select Type of Test:</label>\n//       <select id=\"typeOfTest\" value={selectedTypeOfTest} onChange={handleTypeOfTestChange}>\n//         <option value=\"\">Select Type of Test</option>\n//         {typeOfTests.map(test => (\n//           <option key={test.quesionTypeId } value={test.quesionTypeId }>\n//             {test.typeofQuestion}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n\n//     <div>\n//       <label htmlFor=\"exams\">Select Exam:</label>\n//       <select id=\"exams\" value={selectedexams} onChange={handleexams}>\n//         <option value=\"\">Select exams</option>\n//         {exams.map(exams => (\n//           <option key={exams.examId} value={exams.examId}>\n//             {exams.examName}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n\n//     <div>\n//   <label>Subjects:</label>\n//   {selectedSubjects.map(subject => (\n//     <div key={subject.subjectId}>\n//       <input\n//         type=\"checkbox\"\n//         id={`subject-${subject.subjectId}`}\n//         name={`subject-${subject.subjectId}`}\n//         value={subject.subjectId}\n//         checked={selectedSubjects.includes(subject.subjectId)}\n//         onChange={(e) => handleSubjectChange(e, subject.subjectId)}\n//       />\n//       <label htmlFor={`subject-${subject.subjectId}`}>{subject.subjectName}</label>\n//     </div>\n//   ))}\n// </div>\n// <div>\n//   <label>Question Types:</label>\n//   {questionTypes.map(questionType => (\n//     <div key={questionType.quesionTypeId}>\n//       <input\n//         type=\"checkbox\" \n//         id={`questiontypes-${questionType.quesionTypeId}`}\n//         name={`questiontypes-${questionType.quesionTypeId}`}\n//         value={questionType.quesionTypeId}\n//         checked={selectedQuestionTypes.includes(questionType.quesionTypeId)}\n//         onChange={(e) => handleQuestionTypeChange(e, questionType.quesionTypeId)}\n//       />\n//       <label htmlFor={`questiontypes-${questionType.quesionTypeId}`}>\n//         {questionType.typeofQuestion}\n//       </label>\n//     </div>\n//   ))}\n// </div>\n// <div>\n//           <label htmlFor=\"courseStartDate\">Start Date:</label>\n//           <input\n//             type=\"date\"\n//             id=\"courseStartDate\"\n//             name=\"courseStartDate\"\n//             value={startDate}\n//             onChange={handleStartDateChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"courseEndDate\">End Date:</label>\n//           <input\n//             type=\"date\"\n//             id=\"courseEndDate\"\n//             name=\"courseEndDate\"\n//             value={endDate}\n//             onChange={handleEndDateChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"cost\">Cost:</label>\n//           <input\n//             type=\"number\"\n//             id=\"cost\"\n//             name=\"cost\"\n//             value={formData.cost}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"discount\">Discount (%):</label>\n//           <input\n//             type=\"number\"\n//             id=\"discount\"\n//             name=\"discount\"\n//             value={formData.discount}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"discountAmount\">Discount Amount:</label>\n//           <input\n//             type=\"number\"\n//             id=\"discountAmount\"\n//             name=\"discountAmount\"\n//             value={formData.discountAmount}\n//             readOnly // Make it read-only to prevent manual input\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"totalPrice\">Total Price:</label>\n//           <input\n//             type=\"number\"\n//             id=\"totalPrice\"\n//             name=\"totalPrice\"\n//             value={formData.totalPrice}\n//             readOnly // Make it read-only to prevent manual input\n//           />\n//         </div>\n\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Coursecreation;\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Coursecreation = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Course Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Exams:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n};\n_c = Coursecreation;\nexport default Coursecreation;\nvar _c;\n$RefreshReg$(_c, \"Coursecreation\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Coursecreation","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/new admin project/client/src/components/Coursecreation.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// function  Coursecreation() {\r\n\r\n//   const [typeOfTests, setTypeOfTests] = useState([]);\r\n//   const [selectedTypeOfTest, setSelectedTypeOfTest] = useState('');\r\n//  const [exams, setExams] = useState([]);\r\n//  const [selectedexams, setSelectedexams] = useState('');\r\n//  const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n//  const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [questionTypes, setQuestionTypes] = useState([]);\r\n//   const [selectedQuestionTypes, setSelectedQuestionTypes] = useState([]);\r\n  \r\n\r\n//  const [formData, setFormData] = useState({\r\n//   courseName: '',\r\n//   examId: '',\r\n//   typeOfTestId: '',\r\n//   questiontypes:'',\r\n//   courseStartDate: '',\r\n//   courseEndDate: '',\r\n//   cost: '',\r\n//   discount: '',\r\n//   discountAmount: '',\r\n//   totalPrice: '',\r\n  \r\n// });\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/type-of-tests')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         setTypeOfTests(data);\r\n//       })\r\n//       .catch(error => console.error('Error fetching type of tests:', error));\r\n//   }, []); \r\n\r\n//   const handleTypeOfTestChange = (event) => {\r\n//     setSelectedTypeOfTest(event.target.value);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/question-types')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         // console.log('Question Types:', data); // Log the response\r\n//         setQuestionTypes(data); // Update the state\r\n//       })\r\n//       .catch(error => console.error('Error fetching question types:', error));\r\n//   }, []);\r\n  \r\n  \r\n\r\n\r\n//   const handleQuestionTypeChange = (event, questionTypeId) => {\r\n//     const isChecked = event.target.checked;\r\n  \r\n//     if (isChecked) {\r\n//       // Add the selected question type to the list\r\n//       setSelectedQuestionTypes([...selectedQuestionTypes, questionTypeId]);\r\n//     } else {\r\n//       // Remove the deselected question type from the list\r\n//       setSelectedQuestionTypes(selectedQuestionTypes.filter(id => id !== questionTypeId));\r\n//     }\r\n//   };\r\n  \r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/courese-exams')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         setExams(data);\r\n//       })\r\n//       .catch(error => console.error('Error fetching exams:', error));\r\n//   }, []);\r\n\r\n//   const handleexams = async (event) => {\r\n//     const selectedExamId = event.target.value;\r\n  \r\n//     // Fetch subjects for the selected exam\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\r\n//       const subjectsData = await response.json();\r\n//       setSelectedSubjects(subjectsData);\r\n//     } catch (error) {\r\n//       console.error('Error fetching subjects:', error);\r\n//     }\r\n  \r\n//     setSelectedexams(selectedExamId);\r\n//   };\r\n\r\n//   const handleSubjectChange = (event, subjectId) => {\r\n//     const isChecked = event.target.checked;\r\n  \r\n//     if (isChecked) {\r\n//       // Add the selected subject to the list\r\n//       setSelectedSubjects([...selectedSubjects, subjectId]);\r\n//     } else {\r\n//       // Remove the deselected subject from the list\r\n//       setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n  \r\n//     // Directly parse cost and discount from their input values\r\n//     if (name === 'cost' || name === 'discount') {\r\n//       const cost = name === 'cost' ? parseFloat(value) : formData.cost;\r\n//       const discount = name === 'discount' ? parseFloat(value) : formData.discount;\r\n  \r\n//       // Calculate discount amount\r\n//       const discountAmount = (!isNaN(cost) && !isNaN(discount)) ? (cost * discount) / 100 : '';\r\n  \r\n//       // Calculate total price after discount\r\n//       const totalPrice = (!isNaN(cost) && !isNaN(discountAmount)) ? cost - discountAmount : '';\r\n  \r\n//       // Update the form data including formatted dates\r\n//       setFormData({\r\n//         ...formData,\r\n//         typeOfTestId: selectedTypeOfTest,\r\n//         examId: selectedexams,\r\n//         subjects: selectedSubjects,\r\n//         questiontypes: selectedQuestionTypes,\r\n//         courseStartDate: startDate,\r\n//         courseEndDate: endDate,\r\n//         cost: cost,\r\n//         discount: discount,\r\n//         discountAmount: discountAmount,\r\n//         totalPrice: totalPrice,\r\n       \r\n//       });\r\n//     } else if (name === 'courseStartDate' || name === 'courseEndDate') {\r\n//       // For date fields, update as usual\r\n//       setFormData({ ...formData, [name]: value });\r\n//     } else {\r\n//       // For other fields, update as usual\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n\r\n//   const handleSubmit = async e => {\r\n//     e.preventDefault();\r\n\r\n//     // Prepare the data for submission\r\n//     const data = {\r\n//       ...formData,\r\n//       typeOfTestId: selectedTypeOfTest,\r\n//       examId: selectedexams,\r\n//       subjects: selectedSubjects,\r\n//       questiontypes: selectedQuestionTypes,\r\n//     };\r\n\r\n//     // Submit the data to the server\r\n//     try {\r\n//       const response = await fetch('http://localhost:3081/course-creation', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(data),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n//       console.log(result);\r\n//       // Handle success or show a success message to the user\r\n//     } catch (error) {\r\n//       console.error('Error submitting course data:', error);\r\n//       // Handle error or show an error message to the user\r\n//     }\r\n//   };\r\n\r\n//   const handleStartDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setStartDate(formattedDate);\r\n//   };\r\n  \r\n//   const handleEndDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setEndDate(formattedDate);\r\n//   };\r\n  \r\n//   return (\r\n//     <div>\r\n//       <h2>Create a New Course</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label htmlFor=\"courseName\">Course Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"courseName\"\r\n//             name=\"courseName\"\r\n//             value={formData.courseName}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//       <label htmlFor=\"typeOfTest\">Select Type of Test:</label>\r\n//       <select id=\"typeOfTest\" value={selectedTypeOfTest} onChange={handleTypeOfTestChange}>\r\n//         <option value=\"\">Select Type of Test</option>\r\n//         {typeOfTests.map(test => (\r\n//           <option key={test.quesionTypeId } value={test.quesionTypeId }>\r\n//             {test.typeofQuestion}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n\r\n\r\n//     <div>\r\n//       <label htmlFor=\"exams\">Select Exam:</label>\r\n//       <select id=\"exams\" value={selectedexams} onChange={handleexams}>\r\n//         <option value=\"\">Select exams</option>\r\n//         {exams.map(exams => (\r\n//           <option key={exams.examId} value={exams.examId}>\r\n//             {exams.examName}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n\r\n//     <div>\r\n//   <label>Subjects:</label>\r\n//   {selectedSubjects.map(subject => (\r\n//     <div key={subject.subjectId}>\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         id={`subject-${subject.subjectId}`}\r\n//         name={`subject-${subject.subjectId}`}\r\n//         value={subject.subjectId}\r\n//         checked={selectedSubjects.includes(subject.subjectId)}\r\n//         onChange={(e) => handleSubjectChange(e, subject.subjectId)}\r\n//       />\r\n//       <label htmlFor={`subject-${subject.subjectId}`}>{subject.subjectName}</label>\r\n//     </div>\r\n//   ))}\r\n// </div>\r\n// <div>\r\n//   <label>Question Types:</label>\r\n//   {questionTypes.map(questionType => (\r\n//     <div key={questionType.quesionTypeId}>\r\n//       <input\r\n//         type=\"checkbox\" \r\n//         id={`questiontypes-${questionType.quesionTypeId}`}\r\n//         name={`questiontypes-${questionType.quesionTypeId}`}\r\n//         value={questionType.quesionTypeId}\r\n//         checked={selectedQuestionTypes.includes(questionType.quesionTypeId)}\r\n//         onChange={(e) => handleQuestionTypeChange(e, questionType.quesionTypeId)}\r\n//       />\r\n//       <label htmlFor={`questiontypes-${questionType.quesionTypeId}`}>\r\n//         {questionType.typeofQuestion}\r\n//       </label>\r\n//     </div>\r\n//   ))}\r\n// </div>\r\n// <div>\r\n//           <label htmlFor=\"courseStartDate\">Start Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"courseStartDate\"\r\n//             name=\"courseStartDate\"\r\n//             value={startDate}\r\n//             onChange={handleStartDateChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"courseEndDate\">End Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"courseEndDate\"\r\n//             name=\"courseEndDate\"\r\n//             value={endDate}\r\n//             onChange={handleEndDateChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label htmlFor=\"cost\">Cost:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"cost\"\r\n//             name=\"cost\"\r\n//             value={formData.cost}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"discount\">Discount (%):</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"discount\"\r\n//             name=\"discount\"\r\n//             value={formData.discount}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"discountAmount\">Discount Amount:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"discountAmount\"\r\n//             name=\"discountAmount\"\r\n//             value={formData.discountAmount}\r\n//             readOnly // Make it read-only to prevent manual input\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"totalPrice\">Total Price:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"totalPrice\"\r\n//             name=\"totalPrice\"\r\n//             value={formData.totalPrice}\r\n//             readOnly // Make it read-only to prevent manual input\r\n//           />\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Coursecreation;\r\n\r\n\r\n\r\n\r\nimport React from 'react'\r\n\r\nconst Coursecreation = () => {\r\n  return (\r\n\r\n\r\n\r\n    <div>\r\n<form>\r\n  <label>Course Name\r\n  <input type=\"text\" /></label>\r\n  <label>\r\n    Select Exams:\r\n  </label>\r\n</form>\r\n    </div>\r\n  )}\r\n\r\nexport default Coursecreation"],"mappings":";AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,oBAIED,OAAA;IAAAE,QAAA,eACJF,OAAA;MAAAE,QAAA,gBACEF,OAAA;QAAAE,QAAA,GAAO,aACP,eAAAF,OAAA;UAAOG,IAAI,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC7BP,OAAA;QAAAE,QAAA,EAAO;MAEP;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AACP,CAAC;AAAAC,EAAA,GAdEP,cAAc;AAgBpB,eAAeA,cAAc;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}