{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\new admin project\\\\client\\\\src\\\\components\\\\Coursecreation.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// function  Coursecreation() {\n\n//   const [typeOfTests, setTypeOfTests] = useState([]);\n//   const [selectedTypeOfTest, setSelectedTypeOfTest] = useState('');\n//  const [exams, setExams] = useState([]);\n//  const [selectedexams, setSelectedexams] = useState('');\n//  const [selectedSubjects, setSelectedSubjects] = useState([]);\n//  const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [questionTypes, setQuestionTypes] = useState([]);\n//   const [selectedQuestionTypes, setSelectedQuestionTypes] = useState([]);\n\n//  const [formData, setFormData] = useState({\n//   courseName: '',\n//   examId: '',\n//   typeOfTestId: '',\n//   questiontypes:'',\n//   courseStartDate: '',\n//   courseEndDate: '',\n//   cost: '',\n//   discount: '',\n//   discountAmount: '',\n//   totalPrice: '',\n\n// });\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/type-of-tests')\n//       .then(response => response.json())\n//       .then(data => {\n//         setTypeOfTests(data);\n//       })\n//       .catch(error => console.error('Error fetching type of tests:', error));\n//   }, []); \n\n//   const handleTypeOfTestChange = (event) => {\n//     setSelectedTypeOfTest(event.target.value);\n//   };\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/question-types')\n//       .then(response => response.json())\n//       .then(data => {\n//         // console.log('Question Types:', data); // Log the response\n//         setQuestionTypes(data); // Update the state\n//       })\n//       .catch(error => console.error('Error fetching question types:', error));\n//   }, []);\n\n//   const handleQuestionTypeChange = (event, questionTypeId) => {\n//     const isChecked = event.target.checked;\n\n//     if (isChecked) {\n//       // Add the selected question type to the list\n//       setSelectedQuestionTypes([...selectedQuestionTypes, questionTypeId]);\n//     } else {\n//       // Remove the deselected question type from the list\n//       setSelectedQuestionTypes(selectedQuestionTypes.filter(id => id !== questionTypeId));\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetch('http://localhost:3081/courese-exams')\n//       .then(response => response.json())\n//       .then(data => {\n//         setExams(data);\n//       })\n//       .catch(error => console.error('Error fetching exams:', error));\n//   }, []);\n\n//   const handleexams = async (event) => {\n//     const selectedExamId = event.target.value;\n\n//     // Fetch subjects for the selected exam\n//     try {\n//       const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\n//       const subjectsData = await response.json();\n//       setSelectedSubjects(subjectsData);\n//     } catch (error) {\n//       console.error('Error fetching subjects:', error);\n//     }\n\n//     setSelectedexams(selectedExamId);\n//   };\n\n//   const handleSubjectChange = (event, subjectId) => {\n//     const isChecked = event.target.checked;\n\n//     if (isChecked) {\n//       // Add the selected subject to the list\n//       setSelectedSubjects([...selectedSubjects, subjectId]);\n//     } else {\n//       // Remove the deselected subject from the list\n//       setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n\n//     // Directly parse cost and discount from their input values\n//     if (name === 'cost' || name === 'discount') {\n//       const cost = name === 'cost' ? parseFloat(value) : formData.cost;\n//       const discount = name === 'discount' ? parseFloat(value) : formData.discount;\n\n//       // Calculate discount amount\n//       const discountAmount = (!isNaN(cost) && !isNaN(discount)) ? (cost * discount) / 100 : '';\n\n//       // Calculate total price after discount\n//       const totalPrice = (!isNaN(cost) && !isNaN(discountAmount)) ? cost - discountAmount : '';\n\n//       // Update the form data including formatted dates\n//       setFormData({\n//         ...formData,\n//         typeOfTestId: selectedTypeOfTest,\n//         examId: selectedexams,\n//         subjects: selectedSubjects,\n//         questiontypes: selectedQuestionTypes,\n//         courseStartDate: startDate,\n//         courseEndDate: endDate,\n//         cost: cost,\n//         discount: discount,\n//         discountAmount: discountAmount,\n//         totalPrice: totalPrice,\n\n//       });\n//     } else if (name === 'courseStartDate' || name === 'courseEndDate') {\n//       // For date fields, update as usual\n//       setFormData({ ...formData, [name]: value });\n//     } else {\n//       // For other fields, update as usual\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     // Prepare the data for submission\n//     const data = {\n//       ...formData,\n//       typeOfTestId: selectedTypeOfTest,\n//       examId: selectedexams,\n//       subjects: selectedSubjects,\n//       questiontypes: selectedQuestionTypes,\n//     };\n\n//     // Submit the data to the server\n//     try {\n//       const response = await fetch('http://localhost:3081/course-creation', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(data),\n//       });\n\n//       const result = await response.json();\n//       console.log(result);\n//       // Handle success or show a success message to the user\n//     } catch (error) {\n//       console.error('Error submitting course data:', error);\n//       // Handle error or show an error message to the user\n//     }\n//   };\n\n//   const handleStartDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setStartDate(formattedDate);\n//   };\n\n//   const handleEndDateChange = (e) => {\n//     const formattedDate = e.target.value;\n//     setEndDate(formattedDate);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Create a New Course</h2>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"courseName\">Course Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"courseName\"\n//             name=\"courseName\"\n//             value={formData.courseName}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//       <label htmlFor=\"typeOfTest\">Select Type of Test:</label>\n//       <select id=\"typeOfTest\" value={selectedTypeOfTest} onChange={handleTypeOfTestChange}>\n//         <option value=\"\">Select Type of Test</option>\n//         {typeOfTests.map(test => (\n//           <option key={test.quesionTypeId } value={test.quesionTypeId }>\n//             {test.typeofQuestion}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n\n//     <div>\n//       <label htmlFor=\"exams\">Select Exam:</label>\n//       <select id=\"exams\" value={selectedexams} onChange={handleexams}>\n//         <option value=\"\">Select exams</option>\n//         {exams.map(exams => (\n//           <option key={exams.examId} value={exams.examId}>\n//             {exams.examName}\n//           </option>\n//         ))}\n//       </select>\n//     </div>\n\n//     <div>\n//   <label>Subjects:</label>\n//   {selectedSubjects.map(subject => (\n//     <div key={subject.subjectId}>\n//       <input\n//         type=\"checkbox\"\n//         id={`subject-${subject.subjectId}`}\n//         name={`subject-${subject.subjectId}`}\n//         value={subject.subjectId}\n//         checked={selectedSubjects.includes(subject.subjectId)}\n//         onChange={(e) => handleSubjectChange(e, subject.subjectId)}\n//       />\n//       <label htmlFor={`subject-${subject.subjectId}`}>{subject.subjectName}</label>\n//     </div>\n//   ))}\n// </div>\n// <div>\n//   <label>Question Types:</label>\n//   {questionTypes.map(questionType => (\n//     <div key={questionType.quesionTypeId}>\n//       <input\n//         type=\"checkbox\" \n//         id={`questiontypes-${questionType.quesionTypeId}`}\n//         name={`questiontypes-${questionType.quesionTypeId}`}\n//         value={questionType.quesionTypeId}\n//         checked={selectedQuestionTypes.includes(questionType.quesionTypeId)}\n//         onChange={(e) => handleQuestionTypeChange(e, questionType.quesionTypeId)}\n//       />\n//       <label htmlFor={`questiontypes-${questionType.quesionTypeId}`}>\n//         {questionType.typeofQuestion}\n//       </label>\n//     </div>\n//   ))}\n// </div>\n// <div>\n//           <label htmlFor=\"courseStartDate\">Start Date:</label>\n//           <input\n//             type=\"date\"\n//             id=\"courseStartDate\"\n//             name=\"courseStartDate\"\n//             value={startDate}\n//             onChange={handleStartDateChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"courseEndDate\">End Date:</label>\n//           <input\n//             type=\"date\"\n//             id=\"courseEndDate\"\n//             name=\"courseEndDate\"\n//             value={endDate}\n//             onChange={handleEndDateChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"cost\">Cost:</label>\n//           <input\n//             type=\"number\"\n//             id=\"cost\"\n//             name=\"cost\"\n//             value={formData.cost}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"discount\">Discount (%):</label>\n//           <input\n//             type=\"number\"\n//             id=\"discount\"\n//             name=\"discount\"\n//             value={formData.discount}\n//             onChange={handleChange}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"discountAmount\">Discount Amount:</label>\n//           <input\n//             type=\"number\"\n//             id=\"discountAmount\"\n//             name=\"discountAmount\"\n//             value={formData.discountAmount}\n//             readOnly // Make it read-only to prevent manual input\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"totalPrice\">Total Price:</label>\n//           <input\n//             type=\"number\"\n//             id=\"totalPrice\"\n//             name=\"totalPrice\"\n//             value={formData.totalPrice}\n//             readOnly // Make it read-only to prevent manual input\n//           />\n//         </div>\n\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Coursecreation;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Coursecreation = () => {\n  _s();\n  const [typeOfTest, setTypeOfTest] = useState([]);\n  const [exams, setExams] = useState([]);\n  const [selectedexams, setSelectedexams] = useState('');\n  const [selectedSubjects, setSelectedSubjects] = useState([]);\n  const [typeofQuestion, setTypeofQuestion] = useState([]);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [formData, setFormData] = useState({\n    courseName: '',\n    examId: '',\n    typeOfTestId: '',\n    questiontypes: '',\n    courseStartDate: '',\n    courseEndDate: '',\n    cost: '',\n    discount: '',\n    discountAmount: '',\n    totalPrice: ''\n  });\n  useEffect(() => {\n    const fetchTypeOfTest = async () => {\n      try {\n        const response = await fetch('http://localhost:3081/type_of_tests');\n        const result = await response.json();\n        setTypeOfTest(result);\n      } catch (error) {\n        console.error('Error fetching Type of questions:', error);\n      }\n    };\n    fetchTypeOfTest();\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:3081/courese-exams').then(response => response.json()).then(data => {\n      setExams(data);\n    }).catch(error => console.error('Error fetching exams:', error));\n  }, []);\n  const handleexams = async event => {\n    const selectedExamId = event.target.value;\n    try {\n      const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\n      const subjectsData = await response.json();\n      setSelectedSubjects(subjectsData);\n    } catch (error) {\n      console.error('Error fetching subjects:', error);\n    }\n    setSelectedexams(selectedExamId);\n  };\n  const handleSubjectChange = (event, subjectId) => {\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      setSelectedSubjects([...selectedSubjects, subjectId]);\n    } else {\n      setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\n    }\n  };\n  useEffect(() => {\n    const fetchTypeOfQuestion = async () => {\n      try {\n        const response = await fetch('http://localhost:3081/type_of_questions');\n        const result = await response.json();\n        setTypeofQuestion(result);\n      } catch (error) {\n        console.error('Error fetching Type of questions:', error);\n      }\n    };\n    fetchTypeOfQuestion();\n  }, []);\n  const handleStartDateChange = e => {\n    const formattedDate = e.target.value;\n    setStartDate(formattedDate);\n  };\n  const handleEndDateChange = e => {\n    const formattedDate = e.target.value;\n    setEndDate(formattedDate);\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'cost' || name === 'discount') {\n      const cost = name === 'cost' ? parseFloat(value) : formData.cost;\n      const discount = name === 'discount' ? parseFloat(value) : formData.discount;\n      const discountAmount = !isNaN(cost) && !isNaN(discount) ? cost * discount / 100 : '';\n      const totalPrice = !isNaN(cost) && !isNaN(discountAmount) ? cost - discountAmount : '';\n      setFormData({\n        ...formData,\n        typeOfTest,\n        examId: selectedexams,\n        subjects: selectedSubjects,\n        typeofQuestion,\n        courseStartDate: startDate,\n        courseEndDate: endDate,\n        cost: cost,\n        discount: discount,\n        discountAmount: discountAmount,\n        totalPrice: totalPrice\n      });\n    } else if (name === 'courseStartDate' || name === 'courseEndDate') {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: value\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Course Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type of test:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: typeOfTest.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 15\n            }, this), \" \", type.typeOfTestName]\n          }, type.typeOfTestId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Select Exam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"exams\",\n            children: \"Select Exam:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"exams\",\n            value: selectedexams,\n            onChange: handleexams,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select exams\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 13\n            }, this), exams.map(exams => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: exams.examId,\n              children: exams.examName\n            }, exams.examId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \" Select Subjects:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 11\n          }, this), selectedSubjects.map(subject => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: `subject-${subject.subjectId}`,\n              name: `subject-${subject.subjectId}`,\n              value: subject.subjectId,\n              checked: selectedSubjects.includes(subject.subjectId),\n              onChange: e => handleSubjectChange(e, subject.subjectId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `subject-${subject.subjectId}`,\n              children: subject.subjectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 15\n            }, this)]\n          }, subject.subjectId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Type of Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"type of Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: typeofQuestion.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this), \" \", type.typeofQuestion]\n          }, type.quesionTypeId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Course Duration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"courseStartDate\",\n            children: \"Course Start Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"courseStartDate\",\n            name: \"courseStartDate\",\n            value: startDate,\n            onChange: handleStartDateChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"courseEndDate\",\n            children: \"Course End Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"courseEndDate\",\n            name: \"courseEndDate\",\n            value: endDate,\n            onChange: handleEndDateChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Cost and Discounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cost\",\n            children: \"Cost:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"cost\",\n            name: \"cost\",\n            value: formData.cost,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"discount\",\n            children: \"Discount (%):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"discount\",\n            name: \"discount\",\n            value: formData.discount,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"discountAmount\",\n            children: \"Discount Amount:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"discountAmount\",\n            name: \"discountAmount\",\n            value: formData.discountAmount,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"totalPrice\",\n            children: \"Total Price:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"totalPrice\",\n            name: \"totalPrice\",\n            value: formData.totalPrice,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Course\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 5\n  }, this);\n};\n_s(Coursecreation, \"7/k+K3fqtMh7qZdSseS9Acd7MEo=\");\n_c = Coursecreation;\nexport default Coursecreation;\nvar _c;\n$RefreshReg$(_c, \"Coursecreation\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Coursecreation","_s","typeOfTest","setTypeOfTest","exams","setExams","selectedexams","setSelectedexams","selectedSubjects","setSelectedSubjects","typeofQuestion","setTypeofQuestion","startDate","setStartDate","endDate","setEndDate","formData","setFormData","courseName","examId","typeOfTestId","questiontypes","courseStartDate","courseEndDate","cost","discount","discountAmount","totalPrice","fetchTypeOfTest","response","fetch","result","json","error","console","then","data","catch","handleexams","event","selectedExamId","target","value","subjectsData","handleSubjectChange","subjectId","isChecked","checked","filter","id","fetchTypeOfQuestion","handleStartDateChange","e","formattedDate","handleEndDateChange","handleChange","name","parseFloat","isNaN","subjects","children","type","fileName","_jsxFileName","lineNumber","columnNumber","map","typeOfTestName","htmlFor","onChange","examName","subject","includes","subjectName","quesionTypeId","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/new admin project/client/src/components/Coursecreation.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// function  Coursecreation() {\r\n\r\n//   const [typeOfTests, setTypeOfTests] = useState([]);\r\n//   const [selectedTypeOfTest, setSelectedTypeOfTest] = useState('');\r\n//  const [exams, setExams] = useState([]);\r\n//  const [selectedexams, setSelectedexams] = useState('');\r\n//  const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n//  const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [questionTypes, setQuestionTypes] = useState([]);\r\n//   const [selectedQuestionTypes, setSelectedQuestionTypes] = useState([]);\r\n\r\n\r\n//  const [formData, setFormData] = useState({\r\n//   courseName: '',\r\n//   examId: '',\r\n//   typeOfTestId: '',\r\n//   questiontypes:'',\r\n//   courseStartDate: '',\r\n//   courseEndDate: '',\r\n//   cost: '',\r\n//   discount: '',\r\n//   discountAmount: '',\r\n//   totalPrice: '',\r\n\r\n// });\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/type-of-tests')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         setTypeOfTests(data);\r\n//       })\r\n//       .catch(error => console.error('Error fetching type of tests:', error));\r\n//   }, []); \r\n\r\n//   const handleTypeOfTestChange = (event) => {\r\n//     setSelectedTypeOfTest(event.target.value);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/question-types')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         // console.log('Question Types:', data); // Log the response\r\n//         setQuestionTypes(data); // Update the state\r\n//       })\r\n//       .catch(error => console.error('Error fetching question types:', error));\r\n//   }, []);\r\n\r\n\r\n\r\n\r\n//   const handleQuestionTypeChange = (event, questionTypeId) => {\r\n//     const isChecked = event.target.checked;\r\n\r\n//     if (isChecked) {\r\n//       // Add the selected question type to the list\r\n//       setSelectedQuestionTypes([...selectedQuestionTypes, questionTypeId]);\r\n//     } else {\r\n//       // Remove the deselected question type from the list\r\n//       setSelectedQuestionTypes(selectedQuestionTypes.filter(id => id !== questionTypeId));\r\n//     }\r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     fetch('http://localhost:3081/courese-exams')\r\n//       .then(response => response.json())\r\n//       .then(data => {\r\n//         setExams(data);\r\n//       })\r\n//       .catch(error => console.error('Error fetching exams:', error));\r\n//   }, []);\r\n\r\n//   const handleexams = async (event) => {\r\n//     const selectedExamId = event.target.value;\r\n\r\n//     // Fetch subjects for the selected exam\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\r\n//       const subjectsData = await response.json();\r\n//       setSelectedSubjects(subjectsData);\r\n//     } catch (error) {\r\n//       console.error('Error fetching subjects:', error);\r\n//     }\r\n\r\n//     setSelectedexams(selectedExamId);\r\n//   };\r\n\r\n//   const handleSubjectChange = (event, subjectId) => {\r\n//     const isChecked = event.target.checked;\r\n\r\n//     if (isChecked) {\r\n//       // Add the selected subject to the list\r\n//       setSelectedSubjects([...selectedSubjects, subjectId]);\r\n//     } else {\r\n//       // Remove the deselected subject from the list\r\n//       setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\r\n//     }\r\n//   };\r\n\r\n\r\n\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n\r\n//     // Directly parse cost and discount from their input values\r\n//     if (name === 'cost' || name === 'discount') {\r\n//       const cost = name === 'cost' ? parseFloat(value) : formData.cost;\r\n//       const discount = name === 'discount' ? parseFloat(value) : formData.discount;\r\n\r\n//       // Calculate discount amount\r\n//       const discountAmount = (!isNaN(cost) && !isNaN(discount)) ? (cost * discount) / 100 : '';\r\n\r\n//       // Calculate total price after discount\r\n//       const totalPrice = (!isNaN(cost) && !isNaN(discountAmount)) ? cost - discountAmount : '';\r\n\r\n//       // Update the form data including formatted dates\r\n//       setFormData({\r\n//         ...formData,\r\n//         typeOfTestId: selectedTypeOfTest,\r\n//         examId: selectedexams,\r\n//         subjects: selectedSubjects,\r\n//         questiontypes: selectedQuestionTypes,\r\n//         courseStartDate: startDate,\r\n//         courseEndDate: endDate,\r\n//         cost: cost,\r\n//         discount: discount,\r\n//         discountAmount: discountAmount,\r\n//         totalPrice: totalPrice,\r\n\r\n//       });\r\n//     } else if (name === 'courseStartDate' || name === 'courseEndDate') {\r\n//       // For date fields, update as usual\r\n//       setFormData({ ...formData, [name]: value });\r\n//     } else {\r\n//       // For other fields, update as usual\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n\r\n//   const handleSubmit = async e => {\r\n//     e.preventDefault();\r\n\r\n//     // Prepare the data for submission\r\n//     const data = {\r\n//       ...formData,\r\n//       typeOfTestId: selectedTypeOfTest,\r\n//       examId: selectedexams,\r\n//       subjects: selectedSubjects,\r\n//       questiontypes: selectedQuestionTypes,\r\n//     };\r\n\r\n//     // Submit the data to the server\r\n//     try {\r\n//       const response = await fetch('http://localhost:3081/course-creation', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(data),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n//       console.log(result);\r\n//       // Handle success or show a success message to the user\r\n//     } catch (error) {\r\n//       console.error('Error submitting course data:', error);\r\n//       // Handle error or show an error message to the user\r\n//     }\r\n//   };\r\n\r\n//   const handleStartDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setStartDate(formattedDate);\r\n//   };\r\n\r\n//   const handleEndDateChange = (e) => {\r\n//     const formattedDate = e.target.value;\r\n//     setEndDate(formattedDate);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Create a New Course</h2>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label htmlFor=\"courseName\">Course Name:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"courseName\"\r\n//             name=\"courseName\"\r\n//             value={formData.courseName}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//       <label htmlFor=\"typeOfTest\">Select Type of Test:</label>\r\n//       <select id=\"typeOfTest\" value={selectedTypeOfTest} onChange={handleTypeOfTestChange}>\r\n//         <option value=\"\">Select Type of Test</option>\r\n//         {typeOfTests.map(test => (\r\n//           <option key={test.quesionTypeId } value={test.quesionTypeId }>\r\n//             {test.typeofQuestion}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n\r\n\r\n//     <div>\r\n//       <label htmlFor=\"exams\">Select Exam:</label>\r\n//       <select id=\"exams\" value={selectedexams} onChange={handleexams}>\r\n//         <option value=\"\">Select exams</option>\r\n//         {exams.map(exams => (\r\n//           <option key={exams.examId} value={exams.examId}>\r\n//             {exams.examName}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n\r\n//     <div>\r\n//   <label>Subjects:</label>\r\n//   {selectedSubjects.map(subject => (\r\n//     <div key={subject.subjectId}>\r\n//       <input\r\n//         type=\"checkbox\"\r\n//         id={`subject-${subject.subjectId}`}\r\n//         name={`subject-${subject.subjectId}`}\r\n//         value={subject.subjectId}\r\n//         checked={selectedSubjects.includes(subject.subjectId)}\r\n//         onChange={(e) => handleSubjectChange(e, subject.subjectId)}\r\n//       />\r\n//       <label htmlFor={`subject-${subject.subjectId}`}>{subject.subjectName}</label>\r\n//     </div>\r\n//   ))}\r\n// </div>\r\n// <div>\r\n//   <label>Question Types:</label>\r\n//   {questionTypes.map(questionType => (\r\n//     <div key={questionType.quesionTypeId}>\r\n//       <input\r\n//         type=\"checkbox\" \r\n//         id={`questiontypes-${questionType.quesionTypeId}`}\r\n//         name={`questiontypes-${questionType.quesionTypeId}`}\r\n//         value={questionType.quesionTypeId}\r\n//         checked={selectedQuestionTypes.includes(questionType.quesionTypeId)}\r\n//         onChange={(e) => handleQuestionTypeChange(e, questionType.quesionTypeId)}\r\n//       />\r\n//       <label htmlFor={`questiontypes-${questionType.quesionTypeId}`}>\r\n//         {questionType.typeofQuestion}\r\n//       </label>\r\n//     </div>\r\n//   ))}\r\n// </div>\r\n// <div>\r\n//           <label htmlFor=\"courseStartDate\">Start Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"courseStartDate\"\r\n//             name=\"courseStartDate\"\r\n//             value={startDate}\r\n//             onChange={handleStartDateChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"courseEndDate\">End Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"courseEndDate\"\r\n//             name=\"courseEndDate\"\r\n//             value={endDate}\r\n//             onChange={handleEndDateChange}\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label htmlFor=\"cost\">Cost:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"cost\"\r\n//             name=\"cost\"\r\n//             value={formData.cost}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"discount\">Discount (%):</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"discount\"\r\n//             name=\"discount\"\r\n//             value={formData.discount}\r\n//             onChange={handleChange}\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"discountAmount\">Discount Amount:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"discountAmount\"\r\n//             name=\"discountAmount\"\r\n//             value={formData.discountAmount}\r\n//             readOnly // Make it read-only to prevent manual input\r\n//           />\r\n//         </div>\r\n\r\n//         <div>\r\n//           <label htmlFor=\"totalPrice\">Total Price:</label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"totalPrice\"\r\n//             name=\"totalPrice\"\r\n//             value={formData.totalPrice}\r\n//             readOnly // Make it read-only to prevent manual input\r\n//           />\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Submit</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Coursecreation;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst Coursecreation = () => {\r\n  const [typeOfTest, setTypeOfTest] = useState([]);\r\n  const [exams, setExams] = useState([]);\r\n  const [selectedexams, setSelectedexams] = useState('');\r\n  const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n  const [typeofQuestion, setTypeofQuestion] = useState([]);\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n\r\n\r\n const [formData, setFormData] = useState({\r\n  courseName: '',\r\n  examId: '',\r\n  typeOfTestId: '',\r\n  questiontypes:'',\r\n  courseStartDate: '',\r\n  courseEndDate: '',\r\n  cost: '',\r\n  discount: '',\r\n  discountAmount: '',\r\n  totalPrice: '',\r\n\r\n});\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchTypeOfTest = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3081/type_of_tests');\r\n        const result = await response.json();\r\n        setTypeOfTest(result);\r\n      } catch (error) {\r\n        console.error('Error fetching Type of questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchTypeOfTest();\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3081/courese-exams')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setExams(data);\r\n      })\r\n      .catch(error => console.error('Error fetching exams:', error));\r\n  }, []);\r\n  const handleexams = async (event) => {\r\n    const selectedExamId = event.target.value;\r\n    try {\r\n      const response = await fetch(`http://localhost:3081/courese-exam-subjects/${selectedExamId}/subjects`);\r\n      const subjectsData = await response.json();\r\n      setSelectedSubjects(subjectsData);\r\n    } catch (error) {\r\n      console.error('Error fetching subjects:', error);\r\n    }\r\n\r\n    setSelectedexams(selectedExamId);\r\n  };\r\n  const handleSubjectChange = (event, subjectId) => {\r\n    const isChecked = event.target.checked;\r\n    if (isChecked) {\r\n      setSelectedSubjects([...selectedSubjects, subjectId]);\r\n    } else {\r\n      setSelectedSubjects(selectedSubjects.filter(id => id !== subjectId));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTypeOfQuestion = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3081/type_of_questions');\r\n        const result = await response.json();\r\n        setTypeofQuestion(result);\r\n      } catch (error) {\r\n        console.error('Error fetching Type of questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchTypeOfQuestion();\r\n  }, []);\r\n\r\n\r\n  const handleStartDateChange = (e) => {\r\n    const formattedDate = e.target.value;\r\n    setStartDate(formattedDate);\r\n  };\r\n\r\n  const handleEndDateChange = (e) => {\r\n    const formattedDate = e.target.value;\r\n    setEndDate(formattedDate);\r\n  };\r\n\r\n  \r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'cost' || name === 'discount') {\r\n      const cost = name === 'cost' ? parseFloat(value) : formData.cost;\r\n      const discount = name === 'discount' ? parseFloat(value) : formData.discount;\r\n      const discountAmount = (!isNaN(cost) && !isNaN(discount)) ? (cost * discount) / 100 : '';\r\n      const totalPrice = (!isNaN(cost) && !isNaN(discountAmount)) ? cost - discountAmount : '';\r\n      setFormData({\r\n        ...formData,\r\n        typeOfTest,\r\n        examId: selectedexams,\r\n        subjects: selectedSubjects,\r\n        typeofQuestion,\r\n        courseStartDate: startDate,\r\n        courseEndDate: endDate,\r\n        cost: cost,\r\n        discount: discount,\r\n        discountAmount: discountAmount,\r\n        totalPrice: totalPrice,\r\n\r\n      });\r\n    } else if (name === 'courseStartDate' || name === 'courseEndDate') {\r\n      setFormData({ ...formData, [name]: value });\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <label>Course Name:\r\n          <input type=\"text\" /></label>\r\n        <br />\r\n        <fieldset>\r\n        <label>\r\n          Type of test:\r\n        </label>\r\n        <div>\r\n          {typeOfTest.map((type) => (\r\n            <div key={type.typeOfTestId}>\r\n              <input type=\"checkbox\" /> {type.typeOfTestName}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </fieldset>\r\n        <br />\r\n        <fieldset>\r\n        <legend>Select Exam</legend>\r\n        <div>\r\n          <label htmlFor=\"exams\">Select Exam:</label>\r\n          <select id=\"exams\" value={selectedexams} onChange={handleexams}>\r\n            <option value=\"\">Select exams</option>\r\n            {exams.map(exams => (\r\n              <option key={exams.examId} value={exams.examId}>\r\n                {exams.examName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n         <br />\r\n\r\n        <div>\r\n          <label> Select Subjects:</label>\r\n          {selectedSubjects.map(subject => (\r\n            <div key={subject.subjectId}>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`subject-${subject.subjectId}`}\r\n                name={`subject-${subject.subjectId}`}\r\n                value={subject.subjectId}\r\n                checked={selectedSubjects.includes(subject.subjectId)}\r\n                onChange={(e) => handleSubjectChange(e, subject.subjectId)}\r\n              />\r\n              <label htmlFor={`subject-${subject.subjectId}`}>{subject.subjectName}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </fieldset>\r\n         <br />\r\n         <fieldset>\r\n         <legend>Type of Questions</legend>\r\n        <label>\r\n          type of Questions:\r\n        </label>\r\n        <div>\r\n          {typeofQuestion.map((type) => (\r\n            <div key={type.quesionTypeId}>\r\n              <input type=\"checkbox\" /> {type.typeofQuestion}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </fieldset>\r\n        <br />\r\n        <fieldset>\r\n        <legend>Course Duration</legend>\r\n        <div>\r\n          <label htmlFor=\"courseStartDate\">Course Start Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"courseStartDate\"\r\n            name=\"courseStartDate\"\r\n            value={startDate}\r\n            onChange={handleStartDateChange}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"courseEndDate\">Course End Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"courseEndDate\"\r\n            name=\"courseEndDate\"\r\n            value={endDate}\r\n            onChange={handleEndDateChange}\r\n          />\r\n        </div>\r\n        </fieldset>\r\n         <br />\r\n        <fieldset>\r\n        <legend>Cost and Discounts</legend>\r\n         <div>\r\n          <label htmlFor=\"cost\">Cost:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"cost\"\r\n            name=\"cost\"\r\n            value={formData.cost}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n       <div>\r\n          <label htmlFor=\"discount\">Discount (%):</label>\r\n        <input\r\n            type=\"number\"\r\n            id=\"discount\"\r\n            name=\"discount\"\r\n            value={formData.discount}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"discountAmount\">Discount Amount:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"discountAmount\"\r\n            name=\"discountAmount\"\r\n            value={formData.discountAmount}\r\n            readOnly \r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"totalPrice\">Total Price:</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"totalPrice\"\r\n            name=\"totalPrice\"\r\n            value={formData.totalPrice}\r\n            readOnly\r\n          />\r\n        </div>\r\n        </fieldset>\r\n        <button type=\"submit\">Create Course</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Coursecreation"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}