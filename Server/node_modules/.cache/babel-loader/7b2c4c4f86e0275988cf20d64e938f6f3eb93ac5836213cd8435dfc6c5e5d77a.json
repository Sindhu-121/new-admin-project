{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\new admin project\\\\client\\\\src\\\\components\\\\Examcreation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './admin.css';\nimport SuccessPopup from './SuccessPopup';\nimport { Link } from 'react-router-dom';\n// import EditForm from './EditForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Examcreation() {\n  _s();\n  const [examName, setExamName] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [selectedSubjects, setSelectedSubjects] = useState([]);\n  const [subjects, setSubjects] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [formOpen, setFormOpen] = useState(false);\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n  const [examsWithSubjects, setExamsWithSubjects] = useState([]);\n  // const [isEditing, setIsEditing] = useState(false);\n  // const [editedExam, setEditedExam] = useState({});\n  // const [editedData, setEditedData] = useState({});\n  // const [editedSubjects, setEditedSubjects] = useState([]);\n  // const [isEditingSubjects, setIsEditingSubjects] = useState(false);\n  // const [selectedExam, setSelectedExam] = useState(null);\n  // const [showEditForm, setShowEditForm] = useState(false);\n  // const [selectedExam, setSelectedExam] = useState(null);\n  const resetForm = () => {\n    setExamName('');\n    setStartDate('');\n    setEndDate('');\n    setSelectedSubjects([]);\n  };\n\n  //....................................FORMATING dTATE...............................//\n  function formatDate(dateString) {\n    const date = new Date(dateString);\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-based\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n  //....................................END...............................//\n\n  //....................................FECHING SUBJECTS ...............................//\n  useEffect(() => {\n    // Fetch subjects from the backend when the component mounts\n    axios.get('http://localhost:3081/subjects').then(response => {\n      setSubjects(response.data);\n    }).catch(error => {\n      console.error('Error fetching subjects:', error);\n    });\n  }, []);\n  //....................................END...............................//\n\n  //....................................HANDLER FOR SUBJECT CHECK BOXS...............................//\n  const handleCheckboxChange = subjectId => {\n    // Toggle the selection of subjects\n    setSelectedSubjects(prevSelected => {\n      if (prevSelected.includes(subjectId)) {\n        return prevSelected.filter(id => id !== subjectId);\n      } else {\n        return [...prevSelected, subjectId];\n      }\n    });\n  };\n  //....................................END...............................//\n\n  //................................... handler for submit button .............................//\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSubmitting(true);\n    const examData = {\n      examName,\n      startDate,\n      endDate,\n      selectedSubjects\n    };\n    axios.post('http://localhost:3081/exams', examData).then(response => {\n      console.log('Exam created:', response.data);\n      // Reset form fields and state as needed\n      setSubmitting(false);\n      resetForm();\n      window.location.reload();\n      setShowSuccessPopup(true);\n    }).catch(error => {\n      console.error('Error creating exam:', error);\n      setSubmitting(false);\n    });\n  };\n  const closeSuccessPopup = () => {\n    setShowSuccessPopup(false);\n  };\n  useEffect(() => {\n    axios.get('http://localhost:3081/exams-with-subjects').then(response => {\n      setExamsWithSubjects(response.data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  //....................................END...............................//\n\n  //.............................Delete button handler ...................//\n  const handleDelete = examId => {\n    // Handle the \"Delete\" action for the given examId on the client side\n    const confirmDelete = window.confirm('Are you sure you want to delete this data?');\n    if (confirmDelete) {\n      setExamsWithSubjects(prevExams => prevExams.filter(exam => exam.examId !== examId));\n\n      // Send a request to delete the exam from the server\n      axios.delete(`http://localhost:3081/exams/${examId}`).then(response => {\n        console.log(`Exam with ID ${examId} deleted from the database`);\n      }).catch(error => {\n        console.error('Error deleting exam:', error);\n      });\n    }\n  };\n  //....................................END...............................//\n\n  //....................................HANDLER FOR EDIT BUTTON...............................//\n\n  //....................................END...............................//\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(Examcreation, \"6s+HGdpiVHk/JoWS77XJzk3jjiQ=\");\n_c = Examcreation;\nexport default Examcreation;\nvar _c;\n$RefreshReg$(_c, \"Examcreation\");","map":{"version":3,"names":["React","useState","useEffect","axios","SuccessPopup","Link","jsxDEV","_jsxDEV","Examcreation","_s","examName","setExamName","startDate","setStartDate","endDate","setEndDate","selectedSubjects","setSelectedSubjects","subjects","setSubjects","submitting","setSubmitting","formOpen","setFormOpen","showSuccessPopup","setShowSuccessPopup","examsWithSubjects","setExamsWithSubjects","resetForm","formatDate","dateString","date","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","get","then","response","data","catch","error","console","handleCheckboxChange","subjectId","prevSelected","includes","filter","id","handleSubmit","e","preventDefault","examData","post","log","window","location","reload","closeSuccessPopup","handleDelete","examId","confirmDelete","confirm","prevExams","exam","delete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/new admin project/client/src/components/Examcreation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './admin.css'\r\nimport SuccessPopup from './SuccessPopup';\r\nimport { Link } from 'react-router-dom';\r\n// import EditForm from './EditForm';\r\nfunction Examcreation() {\r\n    const [examName, setExamName] = useState('');\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n    const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [formOpen, setFormOpen] = useState(false);\r\n    const [showSuccessPopup, setShowSuccessPopup] = useState(false);\r\n    const [examsWithSubjects, setExamsWithSubjects] = useState([]);\r\n    // const [isEditing, setIsEditing] = useState(false);\r\n    // const [editedExam, setEditedExam] = useState({});\r\n    // const [editedData, setEditedData] = useState({});\r\n    // const [editedSubjects, setEditedSubjects] = useState([]);\r\n    // const [isEditingSubjects, setIsEditingSubjects] = useState(false);\r\n    // const [selectedExam, setSelectedExam] = useState(null);\r\n    // const [showEditForm, setShowEditForm] = useState(false);\r\n    // const [selectedExam, setSelectedExam] = useState(null);\r\n    const resetForm = () => {\r\n        setExamName('');\r\n        setStartDate('');\r\n        setEndDate('');\r\n        setSelectedSubjects([]);\r\n    };\r\n\r\n//....................................FORMATING dTATE...............................//\r\n    function formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        const day = date.getDate().toString().padStart(2, '0');\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-based\r\n        const year = date.getFullYear();\r\n        return `${day}/${month}/${year}`;\r\n      }\r\n//....................................END...............................//\r\n\r\n//....................................FECHING SUBJECTS ...............................//\r\n    useEffect(() => {\r\n        // Fetch subjects from the backend when the component mounts\r\n        axios.get('http://localhost:3081/subjects')\r\n            .then(response => {\r\n                setSubjects(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching subjects:', error);\r\n            });\r\n    }, []);\r\n//....................................END...............................//\r\n\r\n//....................................HANDLER FOR SUBJECT CHECK BOXS...............................//\r\n    const handleCheckboxChange = (subjectId) => {\r\n        // Toggle the selection of subjects\r\n        setSelectedSubjects((prevSelected) => {\r\n            if (prevSelected.includes(subjectId)) {\r\n                return prevSelected.filter((id) => id !== subjectId);\r\n            } else {\r\n                return [...prevSelected, subjectId];\r\n            }\r\n        });\r\n    };\r\n//....................................END...............................//\r\n\r\n//................................... handler for submit button .............................//\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setSubmitting(true);\r\n\r\n        const examData = {\r\n            examName,\r\n            startDate,\r\n            endDate,\r\n            selectedSubjects,\r\n        };\r\n\r\n        axios.post('http://localhost:3081/exams', examData)\r\n            .then(response => {\r\n                console.log('Exam created:', response.data);\r\n                // Reset form fields and state as needed\r\n                setSubmitting(false);\r\n                resetForm();\r\n                window.location.reload();\r\n                setShowSuccessPopup(true);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error creating exam:', error);\r\n                setSubmitting(false);\r\n            });\r\n    };\r\n    const closeSuccessPopup = () => {\r\n        setShowSuccessPopup(false);\r\n    };\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3081/exams-with-subjects')\r\n            .then(response => {\r\n                setExamsWithSubjects(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, []);\r\n//....................................END...............................//\r\n\r\n//.............................Delete button handler ...................//\r\n    const handleDelete = (examId) => {\r\n        // Handle the \"Delete\" action for the given examId on the client side\r\n        const confirmDelete = window.confirm('Are you sure you want to delete this data?');\r\n        if (confirmDelete) {\r\n            setExamsWithSubjects(prevExams => prevExams.filter(exam => exam.examId !== examId));\r\n\r\n            // Send a request to delete the exam from the server\r\n            axios.delete(`http://localhost:3081/exams/${examId}`)\r\n                .then(response => {\r\n                    console.log(`Exam with ID ${examId} deleted from the database`);\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error deleting exam:', error);\r\n                });\r\n        }\r\n    };\r\n//....................................END...............................//\r\n    \r\n//....................................HANDLER FOR EDIT BUTTON...............................//\r\n\r\n\r\n\r\n\r\n\r\n//....................................END...............................//\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default Examcreation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}